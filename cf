#! /usr/bin/env python3

import sys
import os
import os.path
import requests
import lxml.html
import argparse

def get_round():
    return os.path.basename(os.getcwd())

def get_problems_count(rnum):
    base_url = 'http://codeforces.com/contest/{rnum}/problems'
    url = base_url.format(**locals())
    r = requests.get(url).text
    doc = lxml.html.document_fromstring(r)
    return len(doc.xpath("//div[@class='problem-statement']"))


def get_tests(rnum):
    os.makedirs('tests')
    base_url = 'http://codeforces.com/contest/{rnum}/problem/{task}'
    problems_count = get_problems_count(rnum)
    for task in (chr(i + ord('A')) for i in range(problems_count)):
        print('Task {task}'.format(**locals()))
        url = base_url.format(**locals())
        doc = lxml.html.document_fromstring(requests.get(url).text)
        test_path = "//div[@class='sample-tests']/div[@class='sample-test']"
        input_elems = doc.xpath(test_path + "/div[@class='input']/pre")
        output_elems = doc.xpath(test_path + "/div[@class='output']/pre")

        nt = len(input_elems)

        input_text = []
        output_text = []
        for i in range(nt):
            input_text.append('\n'.join(input_elems[i].itertext()))
            output_text.append('\n'.join(output_elems[i].itertext()))

        for i in range(nt):
            with open('tests/{task}.in.{i}'.format(**locals()), 'w') as input_file:
                print(input_text[i], file=input_file)
            with open('tests/{task}.out.{i}'.format(**locals()), 'w') as output_file:
                print(output_text[i], file=output_file)

def get_problems(rnum):
    base_url = 'http://codeforces.com/contest/{rnum}/problems'
    url = base_url.format(**locals())
    r = requests.get(url).text
    with open('problems.html', 'w') as problems_file:
        print(r, file=problems_file)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        prog='cf',
        )
    subparsers = parser.add_subparsers(help='sub-command help')

    parser_fetch = subparsers.add_parser('fetch')
    subparsers_fetch = parser_fetch.add_subparsers()

    parser_fetch_tests = subparsers_fetch.add_parser('tests')
    parser_fetch_tests.set_defaults(func=lambda args: get_tests(get_round()))

    parser_fetch_problems = subparsers_fetch.add_parser('problems')
    parser_fetch_problems.set_defaults(func=lambda args: get_problems(get_round()))

    args = parser.parse_args()
    if not hasattr(args, 'func'):
        print()
        sys.exit(1)
    args.func(args)
